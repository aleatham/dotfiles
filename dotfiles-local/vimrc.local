" Use the Solarized Dark theme
set background=dark
colorscheme solarized
" colorscheme cobalt2
let g:solarized_termtrans=1

" ================ General Config ====================

set number
set relativenumber
set numberwidth=5
set timeoutlen=300

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

set rtp+=/usr/local/opt/fzf
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set synmaxcol=128               "limit syntax highlighting
syntax sync minlines=256
set cursorline                  "Highlight the cursor line
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set showmatch
set hlsearch                    "highlight searched terms
set incsearch                   "incremental search
set ignorecase                  "ignore case when searching
set smartcase                   "ignore ignorecase when search pattern contains uppercase chars
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim
set autoindent                  "Always set autoindenting on
set smartindent                 "Set smart indenting
set ignorecase                  "ignore case for searches
set wildmenu                    "visual autocomplete for command menu
set autochdir                   "allow :e to create files in current dir
set laststatus=2                "force the display of the status line. * vim-airline "
set regexpengine=1
set vb t_vb=                    "disable screen flashing and audio bell
:highlight ColorColumn ctermbg=lightgrey guibg=lightgrey

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden
set ttyfast
set lazyredraw
set noesckeys

"turn on syntax highlighting
syntax on

" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader=","
let g:rspec_runner = "os_x_iterm"
let NERDTreeShowHidden=1
let g:fanfingtastic_ignorecase=1
let g:ackprg='ag --vimgrep --smart-case'
let g:ack_apply_qmappings=1
" map <cr> to select highlighted supertab completion
let g:SuperTabCrMapping = 1
cnoreabbrev ag Ack
cnoreabbrev aG Ack
cnoreabbrev Ag Ack
cnoreabbrev AG Ack
" let g:ctrlp_show_hidden = 1
" let g:ctrlp_max_files=0
" let g:ctrlp_max_depth=40

" start NERDTree when vim starts, dont use vim . to start vim though
" also swp to non-NERDTree window
autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * wincmd p


""" PLUGIN CONFIGURATION
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_powerline_fonts = 1
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = '·'
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme="solarized"
let g:one_allow_italics=1

" ale configuration
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '✦'
let g:ale_lint_on_enter = 0
let g:ale_cache_executable_check_failures = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_virtualenv_dir_names = []
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'javascript': ['prettier', 'eslint'],
      \ 'ruby': ['rubocop']
      \}
let g:ale_sign_column_always = 1
let g:ale_fix_on_save = 1

"
" Mappings
" \f apply ALE fixers
nmap <Leader>f :ALEFix<CR>
noremap <C-n> :NERDTreeToggle<CR>
noremap <C-p> :ProjectFiles<CR>
noremap <C-c> :'<,'>w !pbcopy<CR><CR>
noremap <C-b> :Buffers<CR>
nnoremap <C-h> :%s/:\([^=,'"]*\) =>/\1:/g
nnoremap <C-,> :'<,'>s/\n/, /
map <C-F> :Ack <Space>
" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

noremap ; :
noremap : ;

" Close vim if only open window is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" follow symlinked file
function! FollowSymlink()
  let current_file = expand('%:p')
  " check if file type is a symlink
  if getftype(current_file) == 'link'
    " if it is a symlink resolve to the actual file path
    "   and open the actual file
    let actual_file = resolve(current_file)
    silent! execute 'file ' . actual_file
  end
endfunction

" set working directory to git project root
" or directory of current file if not git project
function! SetProjectRoot()
  " default to the current file's directory
  lcd %:p:h
  let git_dir = system("git rev-parse --show-toplevel")
  " See if the command output starts with 'fatal' (if it does, not in a git repo)
  let is_not_git_dir = matchstr(git_dir, '^fatal:.*')
  " if git project, change local directory to git project root
  if empty(is_not_git_dir)
    lcd `=git_dir`
  endif
endfunction

" netrw: follow symlink and set working directory
autocmd CursorMoved silent *
  " short circuit for non-netrw files
  \ if &filetype == 'netrw' |
  \   call FollowSymlink() |
  \   call SetProjectRoot() |
  \ endif

command! ProjectFiles exe "Files " . systemlist('git rev-parse --show-toplevel')[0]
